#@ load("@ytt:data", "data")
#@ load("@ytt:yaml", "yaml")
#@ load("@ytt:base64", "base64")
---
apiVersion: kappctrl.k14s.io/v1alpha1
kind: App
metadata:
  annotations:
    kapp.k14s.io/disable-wait: ""
  name: app-onboarding
  namespace: tap-install
spec:
  serviceAccountName: tap-tap-install-sa
  fetch:
  - inline:
      pathsFrom:
      - secretRef:
          name: app-onboarding-files
  template:
  - ytt:
      ignoreUnknownComments: true
      valuesFrom:
      - secretRef:
          name: app-onboarding-secrets
      - secretRef:
          name: app-onboarding-values
  - kbld: {}
  deploy:
  - kapp: 
      rawOptions: 
      - --diff-changes=true
      - --dangerous-override-ownership-of-existing-resources=true
---
apiVersion: v1
kind: Secret
metadata:
  name: app-onboarding-values
stringData:
  values.yaml: #@ yaml.encode({ "additional_users": data.values.additional_users })
---
apiVersion: v1
kind: Secret
metadata:
  name: app-onboarding-files
stringData:
  additional-users.yaml: |
    #@ load("@ytt:overlay", "overlay")
    #@ load("@ytt:data", "data")
    #@ load("@ytt:base64", "base64")
    #@ load("@ytt:json", "json")
    #@ load("@ytt:yaml", "yaml")

    #@ for user in data.values.additional_users:
    ---
    apiVersion: v1
    kind: Namespace
    metadata:
      name: #@ user.namespace
    ---
    apiVersion: v1
    kind: Secret
    metadata:
      name: tap-registry
      namespace: #@ user.namespace
      annotations:
        secretgen.carvel.dev/image-pull-secret: ""
    type: kubernetes.io/dockerconfigjson
    data:
      .dockerconfigjson: e30K

    ---
    apiVersion: v1
    kind: ServiceAccount
    metadata:
      name: default #! use value from "Install Default Supply Chain"
      namespace: #@ user.namespace
    secrets:
      - name: registry-credentials
      - name: cosign
      - name: gitops-ssh
    imagePullSecrets:
      - name: tap-registry
      - name: registry-credentials
    ---
    apiVersion: rbac.authorization.k8s.io/v1
    kind: RoleBinding
    metadata:
      name: default-permit-deliverable
      namespace: #@ user.namespace
    roleRef:
      apiGroup: rbac.authorization.k8s.io
      kind: ClusterRole
      name: deliverable
    subjects:
      - kind: ServiceAccount
        name: default #! use value from "Install Default Supply Chain"
        namespace: #@ user.namespace
    ---
    apiVersion: rbac.authorization.k8s.io/v1
    kind: RoleBinding
    metadata:
      name: default-permit-workload
      namespace: #@ user.namespace
    roleRef:
      apiGroup: rbac.authorization.k8s.io
      kind: ClusterRole
      name: workload
    subjects:
      - kind: ServiceAccount
        name: default #! use value from "Install Default Supply Chain"
        namespace: #@ user.namespace
    ---
    #@ if "viewer" in user:
    apiVersion: rbac.authorization.k8s.io/v1
    kind: RoleBinding
    metadata:
      name: app-viewer
      namespace: #@ user.namespace
    roleRef:
      apiGroup: rbac.authorization.k8s.io
      kind: ClusterRole
      name: app-viewer
    subjects:
    - apiGroup: rbac.authorization.k8s.io
      kind: Group
      name: #@ user.viewer
    #@ end
    ---
    apiVersion: scanning.apps.tanzu.vmware.com/v1alpha1
    kind: ScanPolicy
    metadata:
      name: scan-policy
      namespace: #@ "{}".format(user.namespace)
    spec:
      regoFile: |
        package main

        # Accepted Values: "Critical", "High", "Medium", "Low", "Negligible", "UnknownSeverity"
        notAllowedSeverities := ["Critical","High","UnknownSeverity"]
        ignoreCves := []

        contains(array, elem) = true {
          array[_] = elem
        } else = false { true }

        isSafe(match) {
          fails := contains(notAllowedSeverities, match.ratings.rating[_])
          not fails
        }

        isSafe(match) {
          ignore := contains(ignoreCves, match.Id)
          ignore
        }

        deny[msg] {
          comp := input.bom.components.component[_]
          vuln := comp.vulnerabilities.vulnerability[_]
          ratings := vuln.ratings.rating[_]
          not isSafe(vuln)
          msg = sprintf("CVE %s %s %s", [comp.name, vuln.id, ratings])
        }
    ---
    apiVersion: packaging.carvel.dev/v1alpha1
    kind: PackageInstall
    metadata:
      name: #@ "grype-{}".format(user.namespace)
      namespace: tap-install
    spec:
      packageRef:
        refName: grype.scanning.apps.tanzu.vmware.com
        versionSelection:
          constraints: 1.2.2
      serviceAccountName: tap-tap-install-sa
      values:
      - secretRef:
          name: #@ "grype-values-{}".format(user.namespace)
    ---
    apiVersion: v1
    kind: Secret
    metadata:
      name: #@ "grype-values-{}".format(user.namespace)
      namespace: tap-install
    stringData:
      values.yaml: #@ yaml.encode({ "namespace": user.namespace, "targetImagePullSecret": "registry-credentials" })
    ---
    apiVersion: v1
    data:
      snyk_token: #@ base64.encode(data.values.snyk_api_token) 
    kind: Secret
    metadata:
      name: snyk-token-secret
      namespace: #@ "{}".format(user.namespace)
    ---
    apiVersion: packaging.carvel.dev/v1alpha1
    kind: PackageInstall
    metadata:
      name: #@ "snyk-{}".format(user.namespace)
      namespace: tap-install
    spec:
      packageRef:
        refName: snyk.scanning.apps.tanzu.vmware.com
        versionSelection:
          constraints: 1.0.0-beta.2
      serviceAccountName: tap-tap-install-sa
      values:
      - secretRef:
          name: #@ "snyk-values-{}".format(user.namespace)
    ---
    apiVersion: v1
    kind: Secret
    metadata:
      name: #@ "snyk-values-{}".format(user.namespace)
      namespace: tap-install
    stringData:
      values.yaml: #@ yaml.encode({ "namespace": user.namespace, "targetImagePullSecret": "registry-credentials",  "snyk": {"tokenSecret": {"name": "snyk-token-secret"}}, "metadataStore": {"caSecret": {"importFromNamespace": ""},"authSecret": {"importFromNamespace": ""}} })
    ---
    apiVersion: scanning.apps.tanzu.vmware.com/v1beta1
    kind: ScanPolicy
    metadata:
      name: snyk-scan-policy
      namespace: #@ "{}".format(user.namespace)
    spec:
      regoFile: |
        package main

        notAllowedSeverities := ["Critical", "Low"]
        ignoreCves := [""]

        contains(array, elem) = true {
          array[_] = elem
        } else = false { true }

        isSafe(match) {
          fails := contains(notAllowedSeverities, match.relationships[_].ratedBy.rating[_].severity)
          not fails
        }

        isSafe(match) {
          ignore := contains(ignoreCves, match.id)
          ignore
        }

        deny[msg] {
          vuln := input.vulnerabilities[_]
          ratings := vuln.relationships[_].ratedBy.rating[_].severity
          comp := vuln.relationships[_].affect.to[_]
          not isSafe(vuln)
          msg = sprintf("%s %s %s", [comp, vuln.id, ratings])
        }
    ---
    apiVersion: v1
    kind: Secret
    metadata:
      name: cosign
      namespace: #@ user.namespace
      annotations:
        kpack.io/cosign.docker-media-types: "1"
    type: Opaque
    data:
      cosign.key: #@ data.values.cosign_private
      cosign.password: #@ data.values.cosign_password
      cosign.pub: #@ data.values.cosign_public
    ---
    apiVersion: v1
    kind: PersistentVolumeClaim
    metadata:
      name: #@ "{}-pipeline-cache".format(user.namespace)
      namespace: #@ "{}".format(user.namespace)
    spec:
      accessModes:
      - ReadWriteOnce
      storageClassName: azurefile
      resources:
        requests:
          storage: 2Gi
    ---
    apiVersion: tekton.dev/v1beta1
    kind: Pipeline
    metadata:
      name: developer-defined-tekton-pipeline
      namespace: #@ "{}".format(user.namespace)
      labels:
        apps.tanzu.vmware.com/pipeline: test
    spec:
      params:
      - name: source-url
      - name: source-revision
      workspaces:
      - name: pipeline-cache
      tasks:
      - name: test
        params:
        - name: source-url
          value: $(params.source-url)
        - name: source-revision
          value: $(params.source-revision)
        workspaces:
        - name: pipeline-cache
          workspace: pipeline-cache
        taskSpec:
          params:
          - name: source-url
          - name: source-revision
          workspaces:
          - name: pipeline-cache
          steps:
            - name: test
              image: gradle
              script: |-
                set -ex
                rm -rf ~/.m2
                ln -fs $(workspaces.pipeline-cache.path) ~/.m2
                cd `mktemp -d`
                wget -qO- $(params.source-url) | tar xvz -m
                ./mvnw test

    #@ registry_url = data.values.container_registry_location
    #@ registry_username = data.values.container_registry_username
    #@ registry_password = data.values.container_registry_password
    #@ docker_auth = base64.encode("{}:{}".format(registry_username, registry_password))
    #@ docker_creds = {"username": registry_username, "password": registry_password, "auth": docker_auth}
    ---
    apiVersion: v1
    data:
      .dockerconfigjson: #@ base64.encode(json.encode({"auths": {registry_url: docker_creds}}))
    kind: Secret
    metadata:
      name: registry-credentials
      namespace: #@ "{}".format(user.namespace)
    type: kubernetes.io/dockerconfigjson
    ---
    apiVersion: v1
    kind: Secret
    metadata:
      name: gitops-ssh
      namespace: #@ "{}".format(user.namespace)
      annotations:
        tekton.dev/git-0: #@ data.values.git_url
    type: kubernetes.io/ssh-auth
    data:
      identity: #@ data.values.git_ssh_private
      identity.pub: #@ data.values.git_ssh_public
      known_hosts: #@ data.values.git_ssh_known_hosts
      ssh-privatekey: #@ data.values.git_ssh_private
    ---
    apiVersion: kappctrl.k14s.io/v1alpha1
    kind: App
    metadata:
      name: #@ "{}-addons".format(user.namespace)
      namespace: tap-install
    spec:
      serviceAccountName: tap-tap-install-sa
      fetch:
      - git:
          url: ssh://git@github.com/Mpluya/tap-tenant-onboarding
          ref: origin/custom
          subPath: #@ "tenants/{}".format(user.namespace)
          secretRef: 
            name: tap-install-gitops-ssh
      template:
      - ytt:
          inline:
            paths:
              values.yaml: |
                #@data/values
                ---
                namespace: test    
      deploy:
      - kapp:
          rawOptions:
          - --diff-changes=true
    #@ end